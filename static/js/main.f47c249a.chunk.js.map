{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","recipes.js","App.js","serviceWorker.js","index.js"],"names":["Card","img","name","desc","rec","useState","isFlipped","setIsFlipped","handleClick","flipDirection","className","id","src","alt","onClick","CardList","recipes","map","user","i","key","SearchBox","searchfield","onSearchChange","type","placeholder","onChange","App","e","setState","target","value","state","searchedRecipes","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAuCeA,EAlCF,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,IAAS,EACNC,oBAAS,GADH,mBACjCC,EADiC,KACtBC,EADsB,KAElCC,EAAc,WACnBD,GAAcD,IAGf,OACC,kBAAC,IAAD,CAAeA,UAAWA,EAAWG,cAAc,cACnD,yBAAKC,UAAU,SACd,yBAAKC,GAAG,SAASD,UAAU,gDAC1B,yBAAKA,UAAU,WAAWE,IAAKX,EAAKY,IAAI,UACxC,6BACC,4BAAKX,GACL,2BAAIC,GACJ,4BAAQO,UAAU,gBAAgBI,QAASN,GAA3C,kBAKH,yBAAKE,UAAU,QACd,yBAAKC,GAAG,SAASD,UAAU,gDAC1B,6BACC,4BAAKR,GACL,2BAAIE,GACL,4BAAQM,UAAU,oBAAoBI,QAASN,GAA/C,yBCNWO,EAnBE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACC,6BAECA,EAAQC,KAAI,SAACC,EAAMC,GACnB,OAAQ,kBAAC,EAAD,CACRC,IAAKJ,EAAQL,GACbV,IAAKe,EAAQG,GAAGlB,IAChBC,KAAMc,EAAQG,GAAGjB,KACjBC,KAAMa,EAAQG,GAAGhB,KACjBC,IAAKY,EAAQG,GAAGf,WCEJiB,EAbG,SAAC,GAAkC,EAAjCC,YAAkC,IAArBC,EAAoB,EAApBA,eAChC,OAEC,yBAAKb,UAAU,OACf,2BAAOA,UAAU,gCAChBc,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCVAP,EAAU,CACtB,CACCL,GAAI,EACJV,IAAK,sBACLC,KAAM,qCACNC,KAAM,kIACNC,IAAK,42BAGN,CACCO,GAAI,EACJV,IAAK,uBACLC,KAAM,wBACNC,KAAM,mHACNC,IAAK,wiBAGN,CACCO,GAAI,EACJV,IAAK,0BACLC,KAAM,wCACNC,KAAM,8IACNC,IAAK,ihBAEN,CACCO,GAAI,EACJV,IAAK,gBACLC,KAAM,sBACNC,KAAM,6FACNC,IAAK,mjBAGN,CACCO,GAAI,EACJV,IAAK,uBACLC,KAAM,mCACNC,KAAM,0EACNC,IAAK,iSAGN,CACCO,GAAI,EACJV,IAAK,kBACLC,KAAM,6BACNC,KAAM,8FACNC,IAAK,mZCCQuB,E,kDApCd,aAAe,IAAD,8BACb,gBAUDJ,eAAiB,SAACK,GACjB,EAAKC,SAAS,CAAEP,YAAaM,EAAEE,OAAOC,SAVtC,EAAKC,MAAQ,CACZhB,QAASA,EACTM,YAAa,IAJD,E,qDAgBH,IAAD,OAGHW,EAAkBC,KAAKF,MAAMhB,QAAQmB,QAAO,SAAAnB,GACjD,OAAOA,EAAQd,KAAKkC,cAAcC,SAAS,EAAKL,MAAMV,YAAYc,kBAEnE,OACA,yBAAK1B,UAAU,MACd,wBAAIA,UAAU,SAAd,gBACA,wBAAIA,UAAU,WAAd,iDACA,kBAAC,EAAD,CAAWa,eAAgBW,KAAKX,iBAC9B,kBAAC,EAAD,CAAUP,QAASiB,S,GA5BNK,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f47c249a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Card.css';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Card = ({img, name, desc, rec}) => {\r\n\tconst [isFlipped, setIsFlipped] = useState(false);\r\n\tconst handleClick = () => {\r\n\t\tsetIsFlipped(!isFlipped);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\r\n\t\t<div className=\"front\">\r\n\t\t\t<div id=\"inline\" className=\"card tc bg-navy dib pr3 pa3 ma1 bw2 shadow-5\">\r\n\t\t\t\t<img className=\"card-img\" src={img} alt=\"photo\"/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{desc}</p>\r\n\t\t\t\t\t<button className=\"bg-light-blue\" onClick={handleClick}>View Recipe</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<div className=\"back\">\r\n\t\t\t<div id=\"inline\" className=\"card tc bg-blue dib pr3 pa3 ma1 bw2 shadow-5\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{rec}</p>\r\n\t\t\t\t<button className=\"white-txt bg-navy\" onClick={handleClick}>View Description</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t\t</ReactCardFlip>\r\n\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({recipes}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trecipes.map((user, i) => {\r\n\t\t\treturn (<Card \r\n\t\t\tkey={recipes.id}\r\n\t\t\timg={recipes[i].img} \r\n\t\t\tname={recipes[i].name} \r\n\t\t\tdesc={recipes[i].desc}\r\n\t\t\trec={recipes[i].rec}\r\n\t\t\t/>\r\n\t\t\t);\r\n\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, onSearchChange}) => {\r\n\treturn (\r\n\r\n\t\t<div className=\"pa2\">\r\n\t\t<input className=\"pa3 ba b--navy bg-washed-blue\"\r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"Search Recipes\"\r\n\t\t\tonChange={onSearchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","export const recipes = [\r\n\t{\r\n\t\tid: 1,\r\n\t\timg: 'grilledEggplant.jpg',\r\n\t\tname: \"Grilled Eggplant with Summer Salsa\",\r\n\t\tdesc: \"This summer favorite is packed with nutrients and flavor. A guaranteed crowd pleaser that is comes together quickly and easily.\",\r\n\t\trec: \"Take one large eggplant and slice it into 1/4 inch rounds. Salt the eggplant and let it sit for 15 minutes. The salt will draw out the bitterness that eggplant can sometimes have. While that is resting, combine a liberal amount of olive oil with minced garlic and a handful of cilantro in a bowl. After 15 minutes, dip each side of your eggplant into the olive oil mixture and place the round on the grill. Grill for 2-3 minutes a side and remove. For the salsa, combine 4-5 tomatoes, a bunch of cilantro, and one jalapeno to the food processor. Pulse a couple of times until chunky consistency is achieved. Add in one can of black beans and canned or freshly grilled corn (off the cob). Mix together with a little bit of olive oil, salt, and pepper. Plate eggplant and a few big spoonfuls of your fresh salsa on top and you've got a quick, easy, healthy weeknight dinner!\"\r\n\t},\r\n\r\n\t{\r\n\t\tid: 2,\r\n\t\timg: 'cliantro-chicken.jpg',\r\n\t\tname: 'Cilantro Lime Chicken',\r\n\t\tdesc: \"A simple 20 minute marinade A simple 20 minute marinade is all you need for this delicous, juicy chicken recipe.\",\r\n\t\trec: \"Mix together one large handful of chopped cilantro, the juice of one lime, two tablespoons of honey, a liberal drizzle of extra virgin olive oil, one clove of minced garlic, and a large pinch (or two) of salt, pepper, and onion powder. Once thoroughly combined, place marinade in a plastic bag with chicken breasts or thighs. Make sure all of the chicken gets coated and set in the fridge to marinate for at least 20 minutes. Once marinated, throw on the grill or cook on the stove until cooked through. Enjoy as is or top with fresh pico di gallo.\"\r\n\t},\r\n\r\n\t{\r\n\t\tid: 3,\r\n\t\timg: 'lemon-garlic-shrimp.jpg',\r\n\t\tname: 'Lemon Garlic Shrimp with Baby Spinach',\r\n\t\tdesc: \"Easy to make and easier to clean up, this one pot showstopper of a dish only consists of a few ingredients, but packs a major flavor punch!\",\r\n\t\trec: \"Buy a pound of fresh or frozen shrimp (I prefer having them already deveined and tail off). Melt a tablespoon of butter in a pan with two cloves of minced garlic and half of a sweet onion. After a few minutes, add in your shrimp. Cook until they are pink and cooked through squeezing the juice of half a lemon toward the end of their cooking and some lemon zest to taste as well. Turn off the heat and add in two large handfuls of baby spinach leaves stirring gently. The residual heat will wilt the leaves down. Bon Appetit!\"\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\timg: 'jar-salad.jpg',\r\n\t\tname: \"On-the-Go Jar Salad\",\r\n\t\tdesc: \"Simple and portable, these jarred salads are great for an on-the-go health concious lunch.\",\r\n\t\trec: \"In the bottom of your jar add 1-2 tablespoons of your favorite salad dressing (mine is mix of olive oil, red wine vinegar, lemon juice, salt, and pepper). Next start building your salad with stockier, harder vegetables on the bottom so that the dressing doesn't sog up your greens. I put carrots, radishes, and shelled edamame and summer corn in the bottom of mine. Next add your greens. I prefer a spring mix, but whatever you have on hand will work fine. Lastly add a sprinkle of feta cheese and seal them up for an easy weekday lunch. Just shake and serve!\"\r\n\t},\r\n\r\n\t{\r\n\t\tid: 5,\r\n\t\timg: 'watermelon-salad.jpg',\r\n\t\tname: 'Feta and Watermelon Summer Salad',\r\n\t\tdesc: \"This fresh summer salad is perfect for a backyard barbeque with friends\",\r\n\t\trec: \"Take one bag of baby arugala and mix with a handful of sliced almonds, feta cheese, fresh watermelon cubes, and fresh blueberries. This simple salad is fresh and bright and delicious with in season summer fruits. Drizzle with some balsamic vinegar or a balsamic glaze, toss, and serve!\"\r\n\t},\r\n\r\n\t{\r\n\t\tid: 6,\r\n\t\timg: 'pesto-pasta.jpg',\r\n\t\tname: 'Arugala Walnut Pesto Pasta',\r\n\t\tdesc: \"Everyone loves a good pesto pasta! These bowtie noodles hold on to all that pesto-goodness.\",\r\n\t\trec: \"To make the pesto put two-three large handfuls of baby arugala, a quarter cup of walnuts, a quarter cup of extra virgin olive oil, and a quarter cup of parmesan into a food processor. mix until well combined. Cook bowtie pasta al dente per the instructions on the box and mix the pesto with the pasta. Slice cherry tomatoes and garnish pasta with them. Add freshly shaved parmesan to taste as well.\"\r\n\t}\r\n\r\n]","import React, { Component, useState } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport './App.css';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport { recipes } from './recipes';\r\nimport ReactCardFlip from 'react-card-flip';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trecipes: recipes,\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tonSearchChange = (e) => {\r\n\t\tthis.setState({ searchfield: e.target.value })\r\n\t\t\r\n\t}\r\n\r\n\trender () {\r\n\r\n\r\n\t\tconst searchedRecipes = this.state.recipes.filter(recipes => {\r\n\t\t\treturn recipes.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t});\r\n\t\treturn (\r\n\t\t<div className=\"tc\">\r\n\t\t\t<h1 className=\"title\">Just Recipes</h1>\r\n\t\t\t<h5 className=\"subHead\">All of the Information, None of the Backstory</h5>\r\n\t\t\t<SearchBox onSearchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<CardList recipes={searchedRecipes}/>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\r\n\t);\r\n\t}\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}